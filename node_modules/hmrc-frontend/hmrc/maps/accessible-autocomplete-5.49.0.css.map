{"version":3,"sources":["../node_modules/accessible-autocomplete/dist/accessible-autocomplete.min.css","accessible-autocomplete.scss","../node_modules/govuk-frontend/govuk/helpers/_typography.scss","../node_modules/govuk-frontend/govuk/settings/_typography-font-families.scss","../node_modules/govuk-frontend/govuk/settings/_typography-font.scss","../node_modules/govuk-frontend/govuk/settings/_typography-responsive.scss","../node_modules/govuk-frontend/govuk/tools/_px-to-rem.scss","../node_modules/govuk-frontend/govuk/vendor/_sass-mq.scss"],"names":[],"mappings":"AAAA,uBAAuB,iBAAiB,CAAC,yCAAyC,uBAAuB,CAAC,wBAAwB,CAAC,eAAe,CAAC,qBAAqB,CAAC,0BAA0B,CAAC,6BAA6B,CAAC,eAAe,CAAC,UAAU,CAAC,qBAAqB,8BAA4B,CAAC,iBAAiB,CAAC,oBAAoB,aAAa,CAAC,iBAAiB,CAAC,8BAA8B,WAAW,CAAC,8BAA8B,sBAAsB,CAAC,gBAAgB,CAAC,kCAA0B,CAA1B,0BAA0B,CAAC,sCAAsC,wBAAwB,CAAC,cAAc,CAAC,mCAAmC,UAAU,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,oBAAoB,qBAAqB,CAAC,wBAAwB,CAAC,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,SAAS,CAAC,UAAU,CAAC,sBAAsB,CAAC,6BAA6B,aAAa,CAAC,4BAA4B,YAAY,CAAC,6BAA6B,gDAAwC,CAAxC,wCAAwC,CAAC,MAAM,CAAC,iBAAiB,CAAC,QAAQ,CAAC,WAAW,CAAC,4BAA4B,iBAAiB,CAAC,sBAAkD,mBAAkB,CAAlB,+BAAkB,CAAlB,oBAAkB,CAAlB,oBAAkB,CAAC,cAAc,CAAC,aAAa,CAAC,iBAAiB,CAAC,wBAAwB,mBAAmB,CAAC,oCAAoC,kBAAkB,CAAC,mCAAmC,qBAAqB,CAAC,2BAA2B,wBAAwB,CAAC,2DAA2D,wBAAwB,CAAC,oBAAoB,CAAC,UAAU,CAAC,SAAS,CAAC,yDAAyD,oBAAoB,sBAAsB,CAAC,sBAAsB,sBAAsB,CAAC,eAAe,CAAC,2DAA2D,wBAAwB,CAAC,6BAA6B,CAAC,yBAAyB,CAAC,sBAAsB,CAAC,8BAA8B,CAAE,CAAA,kCAAkC,wBAAwB,CAAC,aAAa,CAAC,kBAAkB,CAAC,+DAA+D,cAAc,CAAC,gBAAgB,CAAC,0CAA0C,WAAW,CAAC,yBAAyB,+DAA+D,cAAc,CAAC,mBAAmB,CAAE,CCO5wE,gECQE,0CCLkE,CDMlE,kCAAmC,CACnC,iCAAkC,CAsClC,eEkD6B,CF4CzB,cGKe,CHHb,cIrIuC,CJuIzC,gBAzEqC,CKoJnC,aN7NR,gECuBI,sBEqDgC,CHxEnC,CMyNO,6BN7NR,gEC0JQ,cGHa,CHKX,mBIjJqC,CJmJvC,mBArFmC,CDrE1C,CMyNO,aN7NR,gECqJQ,cGMa,CHLb,gBGMe,CJxJtB","file":"../accessible-autocomplete-5.49.0.css","sourcesContent":[".autocomplete__wrapper{position:relative}.autocomplete__hint,.autocomplete__input{-webkit-appearance:none;border:2px solid #0b0c0c;border-radius:0;box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;margin-bottom:0;width:100%}.autocomplete__input{background-color:transparent;position:relative}.autocomplete__hint{color:#b1b4b6;position:absolute}.autocomplete__input--default{padding:5px}.autocomplete__input--focused{outline:3px solid #fd0;outline-offset:0;box-shadow:inset 0 0 0 2px}.autocomplete__input--show-all-values{padding:5px 34px 5px 5px;cursor:pointer}.autocomplete__dropdown-arrow-down{z-index:-1;display:inline-block;position:absolute;right:8px;width:24px;height:24px;top:10px}.autocomplete__menu{background-color:#fff;border:2px solid #0b0c0c;border-top:0;color:#0b0c0c;margin:0;max-height:342px;overflow-x:hidden;padding:0;width:100%;width:calc(100% - 4px)}.autocomplete__menu--visible{display:block}.autocomplete__menu--hidden{display:none}.autocomplete__menu--overlay{box-shadow:rgba(0,0,0,.256863) 0 2px 6px;left:0;position:absolute;top:100%;z-index:100}.autocomplete__menu--inline{position:relative}.autocomplete__option{border-bottom:solid #b1b4b6;border-width:1px 0;cursor:pointer;display:block;position:relative}.autocomplete__option>*{pointer-events:none}.autocomplete__option:first-of-type{border-top-width:0}.autocomplete__option:last-of-type{border-bottom-width:0}.autocomplete__option--odd{background-color:#fafafa}.autocomplete__option--focused,.autocomplete__option:hover{background-color:#1d70b8;border-color:#1d70b8;color:#fff;outline:0}@media (-ms-high-contrast:active),(forced-colors:active){.autocomplete__menu{border-color:FieldText}.autocomplete__option{background-color:Field;color:FieldText}.autocomplete__option--focused,.autocomplete__option:hover{forced-color-adjust:none;background-color:SelectedItem;border-color:SelectedItem;color:SelectedItemText;outline-color:SelectedItemText}}.autocomplete__option--no-results{background-color:#fafafa;color:#646b6f;cursor:not-allowed}.autocomplete__hint,.autocomplete__input,.autocomplete__option{font-size:16px;line-height:1.25}.autocomplete__hint,.autocomplete__option{padding:5px}@media (min-width:641px){.autocomplete__hint,.autocomplete__input,.autocomplete__option{font-size:19px;line-height:1.31579}}","$govuk-include-default-font-face: false;\n\n@import \"../../govuk-frontend/govuk/settings/all\";\n@import \"../../govuk-frontend/govuk/tools/all\";\n@import \"../../govuk-frontend/govuk/helpers/all\";\n@import \"../../accessible-autocomplete/dist/accessible-autocomplete.min\";\n\n.autocomplete__wrapper,\n.autocomplete__input,\n.autocomplete__hint {\n  @include govuk-font($size: 19);\n}\n","////\n/// @group helpers/typography\n////\n\n@import \"../tools/px-to-rem\";\n\n/// 'Common typography' helper\n///\n/// Sets the font family and associated properties, such as font smoothing. Also\n/// overrides the font for print.\n///\n/// @param {List} $font-family [$govuk-font-family] Font family to use\n/// @access public\n\n@mixin govuk-typography-common($font-family: $govuk-font-family) {\n  font-family: $font-family;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n\n  // If the user is using the default GDS Transport font we need to include\n  // the font-face declarations.\n  //\n  // We do not need to include the GDS Transport font-face declarations if\n  // alphagov/govuk_template is being used since nta will already be included by\n  // default.\n  @if $govuk-include-default-font-face {\n    @include _govuk-font-face-gds-transport;\n  }\n\n  @include govuk-media-query($media-type: print) {\n    font-family: $govuk-font-family-print;\n  }\n}\n\n/// Text colour helper\n///\n/// Sets the text colour, including a suitable override for print.\n///\n/// @access public\n\n@mixin govuk-text-colour {\n  color: $govuk-text-colour;\n\n  @include govuk-media-query($media-type: print) {\n    color: $govuk-print-text-colour;\n  }\n}\n\n/// Regular font weight helper\n///\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`. Generally Used to create override classes.\n/// @access public\n\n@mixin govuk-typography-weight-regular($important: false) {\n  font-weight: $govuk-font-weight-regular if($important, !important, null);\n}\n\n/// Bold font weight helper\n///\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`. Generally Used to create override classes.\n/// @access public\n\n@mixin govuk-typography-weight-bold($important: false) {\n  font-weight: $govuk-font-weight-bold if($important, !important, null);\n}\n\n/// Convert line-heights specified in pixels into a relative value, unless\n/// they are already unit-less (and thus already treated as relative values)\n/// or the units do not match the units used for the font size.\n///\n/// @param {Number} $line-height Line height\n/// @param {Number} $font-size Font size\n/// @return {Number} The line height as either a relative value or unmodified\n///\n/// @access private\n\n@function _govuk-line-height($line-height, $font-size) {\n  @if not unitless($line-height) and unit($line-height) == unit($font-size) {\n    $line-height: $line-height / $font-size;\n  }\n\n  @return $line-height;\n}\n\n/// Responsive typography helper\n///\n/// Takes a point from the responsive 'font map' as an argument (the size as it\n/// would appear on tablet and above), and uses it to create font-size and\n/// line-height declarations for different breakpoints, and print.\n///\n/// Example font map:\n///\n/// 19: (\n///   null: (\n///     font-size: 16px,\n///     line-height: 20px\n///   ),\n///   tablet: (\n///     font-size: 19px,\n///     line-height: 25px\n///   ),\n///   print: (\n///     font-size: 14pt,\n///     line-height: 1.15\n///   )\n/// );\n///\n/// @param {Number} $size - Point from the spacing scale (the size as it would\n///   appear on tablet and above)\n/// @param {Number} $override-line-height [false] - Non responsive custom line\n///   height. Omit to use the line height from the font map.\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`.\n///\n/// @throw if `$size` is not a valid point from the spacing scale\n///\n/// @access public\n\n@mixin govuk-typography-responsive($size, $override-line-height: false, $important: false) {\n\n  @if not map-has-key($govuk-typography-scale, $size) {\n    @error \"Unknown font size `#{$size}` - expected a point from the typography scale.\";\n  }\n\n  $font-map: map-get($govuk-typography-scale, $size);\n\n  @each $breakpoint, $breakpoint-map in $font-map {\n    $font-size: map-get($breakpoint-map, \"font-size\");\n    $font-size-rem: govuk-px-to-rem($font-size);\n\n    $line-height: _govuk-line-height(\n      $line-height: if(\n        $override-line-height,\n        $override-line-height,\n        map-get($breakpoint-map, \"line-height\")\n      ),\n      $font-size: $font-size\n    );\n\n    // Mark rules as !important if $important is true - this will result in\n    // these variables becoming strings, so this needs to happen *after* they\n    // are used in calculations\n    $font-size: $font-size if($important, !important, null);\n    $font-size-rem: $font-size-rem if($important, !important, null);\n    $line-height: $line-height if($important, !important, null);\n\n    @if not $breakpoint {\n      font-size: $font-size;\n      @if $govuk-typography-use-rem {\n        font-size: $font-size-rem;\n      }\n      line-height: $line-height;\n    } @else if $breakpoint == \"print\" {\n      @include govuk-media-query($media-type: print) {\n        font-size: $font-size;\n        line-height: $line-height;\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        font-size: $font-size;\n        @if $govuk-typography-use-rem {\n          font-size: $font-size-rem;\n        }\n        line-height: $line-height;\n      }\n    }\n  }\n}\n\n/// Font helper\n///\n/// @param {Number | Boolean} $size Point from the spacing scale (the size as it\n///   would appear on tablet and above). Use `false` to avoid setting a size.\n/// @param {String} $weight [regular] - Weight: `bold` or `regular`\n/// @param {Boolean} $tabular [false] - Whether to use tabular numbers or not\n/// @param {Number} $line-height [false] - Line-height, if overriding the\n///   default\n///\n/// @throw if `$size` is not a valid point from the spacing scale (or false)\n///\n/// @access public\n\n@mixin govuk-font($size, $weight: regular, $tabular: false, $line-height: false) {\n  @if $tabular {\n    // if govuk-font-family-tabular is set use $govuk-font-family-tabular\n    @if $govuk-font-family-tabular {\n      @include govuk-typography-common($font-family: $govuk-font-family-tabular);\n    } @else {\n      @include govuk-typography-common;\n      -webkit-font-feature-settings: \"tnum\" 1;\n              font-feature-settings: \"tnum\" 1;\n\n      @supports (font-variant-numeric: tabular-nums) {\n        -webkit-font-feature-settings: normal;\n                font-feature-settings: normal;\n        font-variant-numeric: tabular-nums;\n      }\n    }\n  } @else {\n    @include govuk-typography-common;\n  }\n\n  @if $weight == regular {\n    @include govuk-typography-weight-regular;\n  } @else if $weight == bold {\n    @include govuk-typography-weight-bold;\n  }\n\n  @if $size {\n    @include govuk-typography-responsive($size, $override-line-height: $line-height);\n  }\n}\n","////\n/// @group settings/typography\n////\n\n/// List of font families to use if using GDS Transport (the default font\n/// 'stack' for GOV.UK)\n///\n/// @type List\n/// @access public\n\n$govuk-font-family-gds-transport: \"GDS Transport\", arial, sans-serif;\n\n/// List of font families to use if using NTA (old font 'stack' for\n/// GOV.UK)\n///\n/// @type List\n/// @access public\n/// @deprecated To be removed once support for compatibility mode is dropped\n\n$govuk-font-family-nta: \"nta\", arial, sans-serif;\n\n/// List of font families to use if using the 'tabular numbers' subset of NTA\n/// (the default font 'stack' for GOV.UK)\n///\n/// Because ntatabularnumbers only includes the digits 0-10, all other glyphs\n/// will 'fall-through' the stack to NTA.\n///\n/// @type List\n/// @access public\n/// @deprecated To be removed once support for compatibility mode is dropped\n\n$govuk-font-family-nta-tabular: \"ntatabularnumbers\", $govuk-font-family-nta;\n","@import \"compatibility\";\n@import \"typography-font-families\";\n\n////\n/// @group settings/typography\n////\n\n/// Use 'legacy' fonts\n///\n/// Whether or not to use v1 nta font from GOV.UK Elements / Frontend\n/// Toolkit, for teams that are migrating to GOV.UK Frontend and may be using\n/// components from both places in a single application.\n///\n/// @type Boolean\n/// @access public\n/// @deprecated Will be removed in v5.0 with the rest of the compatibility mode\n/// suite of tools and settings\n\n$govuk-use-legacy-font: if(\n  (\n    $govuk-compatibility-govukfrontendtoolkit or\n    $govuk-compatibility-govuktemplate or\n    $govuk-compatibility-govukelements\n  ),\n  true,\n  false\n) !default;\n\n// Only show the deprecation warning if user is setting $govuk-use-legacy-font\n// manually instead of automatically via compatibility variables\n@if $govuk-use-legacy-font == true and\n  $govuk-compatibility-govukfrontendtoolkit == false and\n  $govuk-compatibility-govuktemplate == false and\n  $govuk-compatibility-govukelements == false {\n  @include _warning(legacy-font, \"$govuk-use-legacy-font is deprecated. \" +\n  \"From version 5.0, GOV.UK Frontend will only support the included version \" +\n  \"of GDS Transport.\");\n}\n\n// =========================================================\n// Font families\n// =========================================================\n\n/// Font families to use for all typography on screen media\n///\n/// @type List\n/// @access public\n\n$govuk-font-family: if(\n  $govuk-use-legacy-font,\n  $govuk-font-family-nta,\n  $govuk-font-family-gds-transport\n) !default;\n\n/// Font families to use when displaying tabular numbers\n///\n/// @type List\n/// @access public\n/// @deprecated Will be removed in v5.0 with the rest of the compatibility mode\n/// suite of tools and settings\n\n$govuk-font-family-tabular: if(\n  $govuk-use-legacy-font,\n  $govuk-font-family-nta-tabular,\n  false\n) !default;\n\n// Only show the deprecation warning if user is setting $govuk-font-family-tabular\n// manually instead of automatically via $govuk-use-legacy-font\n@if $govuk-font-family-tabular != false and $govuk-use-legacy-font == false {\n  @include _warning(tabular-font-face, \"$govuk-font-family-tabular is deprecated. \" +\n  \"From version 5.0, GOV.UK Frontend will not support using a separate \" +\n  \"font-face for tabular numbers.\");\n}\n\n/// Font families to use for print media\n///\n/// We recommend that you use system fonts when printing. This will avoid issues\n/// with some printer drivers and operating systems.\n///\n/// @type List\n/// @access public\n\n$govuk-font-family-print: sans-serif !default;\n\n/// Include the default @font-face declarations\n///\n/// If you have set $govuk-font-family to something other than\n/// `$govuk-font-family-gds-transport` this option is disabled by default.\n///\n/// @type Boolean\n/// @access public\n\n$govuk-include-default-font-face: (\n  $govuk-font-family == $govuk-font-family-gds-transport\n) !default;\n\n// =========================================================\n// Font weights\n// =========================================================\n\n/// Font weight for regular typography\n///\n/// @type Number\n/// @access public\n$govuk-font-weight-regular: 400 !default;\n\n/// Font weight for bold typography\n///\n/// @type Number\n/// @access public\n$govuk-font-weight-bold: 700 !default;\n","@import \"compatibility\";\n\n////\n/// @group settings/typography\n////\n\n/// Whether or not to define font sizes in rem, improving accessibility by\n/// allowing users to adjust the base font-size. This is enabled by default,\n/// unless any of the compatibility mode settings are enabled.\n///\n/// You should make sure that $govuk-root-font-size is set correctly for your\n/// project.\n///\n/// @type Boolean\n/// @access public\n/// @deprecated Will be removed in v5.0 with the rest of the compatibility mode\n/// suite of tools and settings\n\n$govuk-typography-use-rem: if(\n  (\n    $govuk-compatibility-govukfrontendtoolkit or\n    $govuk-compatibility-govuktemplate or\n    $govuk-compatibility-govukelements\n  ),\n  false,\n  true\n) !default;\n\n// Only show the deprecation warning if user is setting $govuk-typography-use-rem\n// manually instead of automatically via compatibility variables\n@if $govuk-typography-use-rem == false and\n  $govuk-compatibility-govukfrontendtoolkit == false and\n  $govuk-compatibility-govuktemplate == false and\n  $govuk-compatibility-govukelements == false {\n  @include _warning(allow-not-using-rem, \"$govuk-typography-use-rem is deprecated. \" +\n  \"From version 5.0, GOV.UK Frontend will not support disabling rem font sizes.\");\n}\n\n/// Root font size\n///\n/// This is used to calculate rem sizes for the typography, and should match the\n/// _effective_ font-size of your root (or html) element.\n///\n/// Ideally you should not be setting the font-size on the html or root element\n/// in order to allow it to scale with user-preference, in which case this\n/// should be set to 16px.\n///\n/// If you are integrating Frontend into an existing project that also uses\n/// alphagov/govuk_template and you wish to enable `$govuk-typography-use-rem`\n/// then you should set this to 10px to match the 62.5% (10px) base font size\n/// that govuk_template sets on the <html> element.\n///\n/// @type Number\n/// @access public\n\n$govuk-root-font-size: 16px !default;\n\n/// Responsive typography font map\n///\n/// This is used to generate responsive typography that adapts according to the\n/// breakpoints.\n///\n/// Font size and font weight can be defined for each breakpoint. You can define\n/// different behaviour on tablet and desktop. The 'null' breakpoint is for\n/// mobile.\n///\n/// Line-heights will automatically be converted from pixel measurements into\n/// relative values. For example, with a font-size of 16px and a line-height of\n/// 24px, the line-height will be converted to 1.5 before output.\n///\n/// You can also specify a separate font size and line height for print media.\n///\n/// @type Map\n///\n/// @prop {Number} $point.$breakpoint.font-size - Font size for `$point` at `$breakpoint`\n/// @prop {Number} $point.$breakpoint.line-height - Line height for `$point` at `$breakpoint`\n/// @prop {Number} $point.print.font-size - Font size for `$point` when printing\n/// @prop {Number} $point.print.line-height - Line height for `$point` when printing\n///\n/// @access public\n\n$govuk-typography-scale: (\n  80: (\n    null: (\n      font-size: 53px,\n      line-height: 55px\n    ),\n    tablet: (\n      font-size: 80px,\n      line-height: 80px\n    ),\n    print: (\n      font-size: 53pt,\n      line-height: 1.1\n    )\n  ),\n  48: (\n    null: (\n      font-size: 32px,\n      line-height: 35px\n    ),\n    tablet: (\n      font-size: 48px,\n      line-height: 50px\n    ),\n    print: (\n      font-size: 32pt,\n      line-height: 1.15\n    )\n  ),\n  36: (\n    null: (\n      font-size: 24px,\n      line-height: 25px\n    ),\n    tablet: (\n      font-size: 36px,\n      line-height: 40px\n    ),\n    print: (\n      font-size: 24pt,\n      line-height: 1.05\n    )\n  ),\n  27: (\n    null: (\n      font-size: 18px,\n      line-height: 20px\n    ),\n    tablet: (\n      font-size: 27px,\n      line-height: 30px\n    ),\n    print: (\n      font-size: 18pt,\n      line-height: 1.15\n    )\n  ),\n  24: (\n    null: (\n      font-size: 18px,\n      line-height: 20px\n    ),\n    tablet: (\n      font-size: 24px,\n      line-height: 30px\n    ),\n    print: (\n      font-size: 18pt,\n      line-height: 1.15\n    )\n  ),\n  19: (\n    null: (\n      font-size: 16px,\n      line-height: 20px\n    ),\n    tablet: (\n      font-size: 19px,\n      line-height: 25px\n    ),\n    print: (\n      font-size: 14pt,\n      line-height: 1.15\n    )\n  ),\n  16: (\n    null: (\n      font-size: 14px,\n      line-height: 16px\n    ),\n    tablet: (\n      font-size: 16px,\n      line-height: 20px\n    ),\n    print: (\n      font-size: 14pt,\n      line-height: 1.2\n    )\n  ),\n  14: (\n    null: (\n      font-size: 12px,\n      line-height: 15px\n    ),\n    tablet: (\n      font-size: 14px,\n      line-height: 20px\n    ),\n    print: (\n      font-size: 12pt,\n      line-height: 1.2\n    )\n  )\n) !default;\n","////\n/// @group tools/unit-conversion\n////\n\n/// Convert pixels to rem\n///\n/// The $govuk-root-font-size (defined in settings/_typography-responsive.scss)\n/// must be configured to match the font-size of your root (html) element\n///\n/// @param {Number} $value - Length in pixels\n/// @return {Number} Length in rems\n/// @access public\n\n@function govuk-px-to-rem($value) {\n  @if unitless($value) {\n    $value: $value * 1px;\n  }\n\n  @return $value / $govuk-root-font-size * 1rem;\n}\n","// mq() v4.0.2\n// sass-mq/sass-mq\n\n@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (e.g. layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width, e.g. (mobile, tablet, desktop).\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (e.g. `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $until (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $and (false) - Additional media query parameters\n/// @param {String} $media-type ($mq-media-type) - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints ($mq-breakpoints)\n/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints ($mq-show-breakpoints) - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints ($mq-breakpoints) - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n"]}